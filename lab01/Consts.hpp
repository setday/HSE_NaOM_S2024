#pragma once

#include <cfloat>
#include <numbers>
#include <vector>

namespace ADAAI::CONST
{
  template<typename F>
  constexpr inline F LOG2E;
  template<>
  constexpr inline float LOG2E<float> = std::numbers::log2e_v<float>;
  template<>
  constexpr inline double LOG2E<double> = std::numbers::log2e_v<double>;
  template<>
  constexpr inline long double LOG2E<long double> = std::numbers::log2e_v<long double>;

  template<typename F>
  constexpr inline F LN2;
  template<>
  constexpr inline float LN2<float> = std::numbers::ln2_v<float>;
  template<>
  constexpr inline double LN2<double> = std::numbers::ln2_v<double>;
  template<>
  constexpr inline long double LN2<long double> = std::numbers::ln2_v<long double>;

  template<typename F>
  constexpr inline F EPS;
  template<>
  constexpr inline float EPS<float> = std::numeric_limits<float>::epsilon();
  template<>
  constexpr inline double EPS<double> = std::numeric_limits<double>::epsilon();
  template<>
  constexpr inline long double EPS<long double> = std::numeric_limits<long double>::epsilon();

  constexpr float scale = 10;
  template<typename F>
  constexpr inline F DELTA;
  template<>
  constexpr inline float DELTA<float> = scale * EPS<float>;
  template<>
  constexpr inline double DELTA<double> = scale * EPS<double>;
  template<>
  constexpr inline long double DELTA<long double> = scale * EPS<long double>;

  template<typename F>
  constexpr inline F SQRT2;
  template<>
  constexpr inline float SQRT2<float> = std::numbers::sqrt2_v<float>;
  template<>
  constexpr inline double SQRT2<double> = std::numbers::sqrt2_v<double>;
  template<>
  constexpr inline long double SQRT2<long double> = std::numbers::sqrt2_v<long double>;

  // [10.0, 10.0]
  // constexpr inline long double P_TERMS[] = {+1.0, +110.0, +5940.0, +205920.0, +5045040.0, +90810720.0, +1210809600.0, +11762150400.0, +79394515200.0, +335221286400.0, +670442572800.0};
  // constexpr inline long double Q_TERMS[] = {+1.0, -110.0, +5940.0, -205920.0, +5045040.0, -90810720.0, +1210809600.0, -11762150400.0, +79394515200.0, -335221286400.0, +670442572800.0};

  // [19.0, 1.0]
  // constexpr inline long double P_TERMS[] = {-1.0, -38.0, -1026.0, -23256.0, -465120.0, -8372160.0, -136745280.0, -2031644160.0, -27427196160.0, -335221286400.0, -3687434150400.0, -36203898931200.0, -313767124070400.0, -2365321396838400.0, -15205637551104000.0, -81096733605888000.0, -344661117825024000.0, -1094805903679488000.0, -2311256907767808000.0, -2432902008176640000.0};
  // constexpr inline long double Q_TERMS[] = {121645100408832000.0, -2432902008176640000.0};

  // [1.0, 19.0]
  // constexpr inline long double P_TERMS[] = {-121645100408832000.0, -2432902008176640000.0};
  // constexpr inline long double Q_TERMS[] = {1.0, -38.0, +1026.0, -23256.0, +465120.0, -8372160.0, +136745280.0, -2031644160.0, +27427196160.0, -335221286400.0, +3687434150400.0, -36203898931200.0, +313767124070400.0, -2365321396838400.0, +15205637551104000.0, -81096733605888000.0, +344661117825024000.0, -1094805903679488000.0, +2311256907767808000.0, -2432902008176640000.0};

  // [0.0, 20.0]
  // constexpr inline long double P_TERMS[] = {0.0, 2432902008176640000.0};
  // constexpr inline long double Q_TERMS[] = {1.0, -20.0, +380.0, -6840.0, +116280.0, -1860480.0, +27907200.0, -390700800.0, +5079110400.0, -60949324800.0, +670442572800.0, -6704425728000.0, +60339831552000.0, -482718652416000.0, +3379030566912000.0, -20274183401472000.0, +101370917007360000.0, -405483668029440000.0, +1216451004088320000.0, -2432902008176640000.0, +2432902008176640000.0};

  // [15.0, 5.0]
  // constexpr inline long double P_TERMS[] = {-1.0, -90.0, -4410.0, -152880.0, -4127760.0, -90810720.0, -1664863200.0, -25686460800.0, -333923990400.0, -3636061228800.0, -32724551059200.0, -237996734976000.0, -1348648164864000.0, -5602076992512000.0, -15205637551104000.0, -20274183401472000.0};
  // constexpr inline long double Q_TERMS[] = {10897286400.0, -871782912000.0, +29640619008000.0, -533531142144000.0, +5068545850368000.0, -20274183401472000.0};

  // [5.0, 15.0]
  // constexpr inline long double P_TERMS[] = {-10897286400.0, -871782912000.0, -29640619008000.0, -533531142144000.0, -5068545850368000.0, -20274183401472000.0};
  // constexpr inline long double Q_TERMS[] = {1.0, -90.0, +4410.0, -152880.0, +4127760.0, -90810720.0, +1664863200.0, -25686460800.0, +333923990400.0, -3636061228800.0, +32724551059200.0, -237996734976000.0, +1348648164864000.0, -5602076992512000.0, +15205637551104000.0, -20274183401472000.0};

  // [12.0, 8.0]
  // constexpr inline long double P_TERMS[] = {1.0, +108.0, +5940.0, +217800.0, +5880600.0, +122316480.0, +1997835840.0, +25686460800.0, +256864608000.0, +1940754816000.0, +10480076006400.0, +36203898931200.0, +60339831552000.0};
  // constexpr inline long double Q_TERMS[] = {11880.0, - 1235520.0, +60540480.0, -1816214400.0, +36324288000.0, -494010316800.0, +4446092851200.0, -24135932620800.0, +60339831552000.0};

  // [21.0, 19.0]
  // constexpr inline long double P_TERMS[] = {-1.0, -420.0, -88200.0, -12289200.0, -1271932200.0, -103789667520.0, -6919311168000.0, -385504479360000.0, -18215086649760000.0, -736699060056960000.0, -25637127289982208000.0, -769113818699466240000.0, -19868773649736211200000.0, -440169754701848371200000.0, -8300343945806283571200000.0, -131698790606793032663040000.0, -1728546626714158553702400000.0, -18302258400502855274496000000.0, -150485235737467921145856000000.0, -902911414424807526875136000000.0, -3521354516256749354813030400000.0, -6707341935727141628215296000000.0};
  // constexpr inline long double Q_TERMS[] = {420.0, -175560.0, +36340920.0, -4942365120.0, +494236512000.0, -38550447936000.0, +2428678219968000.0, -126291267438336000.0, +5493670133567616000.0, -201434571564145920000.0, +6244471718488523520000.0, -163491623174972252160000.0, +3596815709849389547520000.0, -65849395303396516331520000.0, +987740929550947744972800000.0, -11852891154611372939673600000.0, +109639243180155199691980800000.0, -735227866031628986169753600000.0, +3185987419470392273402265600000.0, -6707341935727141628215296000000.0};

  // [30.0, 10.0]
  // constexpr inline long double P_TERMS[] = {1.0, +330.0, +57420.0, +6966960.0, +658377720.0, +51353462160.0, +3423564144000.0, +199544881536000.0, +10326447619488000.0, +479606122771776000.0, +20143457156414592000.0, +769113818699466240000.0, +26790798018031407360000.0, +853183875343461742080000.0, +24864215795723742197760000.0, +663045754552633125273600000.0, +16161740267220432428544000000.0, +359361048294666085764096000000.0, +7267078976625469734340608000000.0, +133102288624508603555291136000000.0, +2196187762304391958662303744000000.0, +32419914586398167008824483840000000.0, +424406154585576004479156879360000000.0, +4871444556982263703586844180480000000.0, +48308491856740781727236204789760000000.0, +405791331596622566508784120233984000000.0, +2809324603361233152753120832389120000000.0, +15399260788794907652128217896058880000000.0, +62696990354379266869379172862525440000000.0, +168633284401433890200399154595758080000000.0, +224844379201911853600532206127677440000000.0};
  // constexpr inline long double Q_TERMS[] = {73096577329197271449600000.0, -22659938972051154149376000000.0, +3263031211975366197510144000000.0, -287146746653832225380892672000000.0, +17085231425903017410163113984000000.0, -717579719887926731226850787328000000.0, +21527391596637801936805523619840000000.0, -455150565186056383806745356533760000000.0, +6485895553901303469246121330606080000000.0, -56211094800477963400133051531919360000000.0, +224844379201911853600532206127677440000000.0};
  
  //[10.0, 30.0]
  constexpr inline long double P_TERMS[] = { 73096577329197271449600000.0, +22659938972051154149376000000.0, +3263031211975366197510144000000.0, +287146746653832225380892672000000.0, +17085231425903017410163113984000000.0, +717579719887926731226850787328000000.0, +21527391596637801936805523619840000000.0, +455150565186056383806745356533760000000.0, +6485895553901303469246121330606080000000.0, +56211094800477963400133051531919360000000.0, +224844379201911853600532206127677440000000.0};
  constexpr inline long double Q_TERMS[] = {1.0, -330.0, +57420.0, -6966960.0, +658377720.0, -51353462160.0, +3423564144000.0, -199544881536000.0, +10326447619488000.0, -479606122771776000.0, +20143457156414592000.0, -769113818699466240000.0, +26790798018031407360000.0, -853183875343461742080000.0, +24864215795723742197760000.0, -663045754552633125273600000.0, +16161740267220432428544000000.0, -359361048294666085764096000000.0, +7267078976625469734340608000000.0, -133102288624508603555291136000000.0, +2196187762304391958662303744000000.0, -32419914586398167008824483840000000.0, +424406154585576004479156879360000000.0, -4871444556982263703586844180480000000.0, +48308491856740781727236204789760000000.0, -405791331596622566508784120233984000000.0, +2809324603361233152753120832389120000000.0, -15399260788794907652128217896058880000000.0, +62696990354379266869379172862525440000000.0, -168633284401433890200399154595758080000000.0, +224844379201911853600532206127677440000000.0};

} // namespace ADAAI::CONST
